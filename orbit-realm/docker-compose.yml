services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: orbit-realm-nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_etc:/etc/letsencrypt
    networks:
      - orbit-network
    restart: unless-stopped
    depends_on:
      - odoo

  postgres:
    image: postgres:15
    container_name: orbit-postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: odoo
      POSTGRES_PASSWORD: odoo_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    ports:
      - 5433:5432
    networks:
      - orbit-network
    restart: unless-stopped

  odoo:
    image: odoo:18.0
    container_name: orbit-odoo
    depends_on:
      - postgres
    environment:
      HOST: postgres
      USER: odoo
      PASSWORD: odoo_password
    volumes:
      - odoo_data:/var/lib/odoo
      - ./odoo/config:/etc/odoo
      - ./odoo/addons:/mnt/extra-addons
    ports:
      - 8069:8069
    networks:
      - orbit-network
    restart: unless-stopped

  # -------------------------------------------------------------
  # Servicio Certbot (ejecuciones manuales):
  #  Emitir nuevo certificado:
  #    docker compose run --rm certbot certonly \\
  #      --webroot -w /var/www/certbot \\
  #      -d tecnologik.net -d www.tecnologik.net \\
  #      --email admin@tecnologik.net --agree-tos --no-eff-email
  #  Prueba renovaci칩n:
  #    docker compose run --rm certbot certbot renew --dry-run
  # -------------------------------------------------------------
  certbot:
    image: certbot/certbot:latest
    container_name: orbit-certbot
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_etc:/etc/letsencrypt
    networks:
      - orbit-network
    restart: unless-stopped

  # -------------------------------------------------------------
  # Renovaci칩n autom치tica: ejecuta 'certbot renew' cada 12h silenciosamente.
  # Al renovar puedes forzar recarga de nginx agregando --deploy-hook "nginx -s reload"
  # -------------------------------------------------------------
  certbot_renew:
    image: certbot/certbot:latest
    container_name: orbit-certbot-renew
    entrypoint: /bin/sh
    command: -c "while :; do certbot renew --webroot -w /var/www/certbot --quiet --agree-tos --deploy-hook 'nginx -s reload' || true; sleep 12h; done"
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_etc:/etc/letsencrypt
    networks:
      - orbit-network
    restart: unless-stopped

  # -------------------------------------------------------------
  # Emisi칩n inicial automatizada (opcional): editar DOMAINS y EMAIL y ejecutar
  #   docker compose run --rm certbot_init
  # Tras emitir, reiniciar: docker compose restart web
  # -------------------------------------------------------------
  certbot_init:
    image: certbot/certbot:latest
    container_name: orbit-certbot-init
    environment:
      # Ajusta dominios y correo antes de usar
      DOMAINS: "tecnologik.net,www.tecnologik.net"
      EMAIL: "admin@tecnologik.net"
    entrypoint: /bin/sh
    # IMPORTANTE: Se escapan $ como $$ para que docker compose no los expanda al parsear.
    command: |
      -c '
      set -e
      domain_args=""
      first_domain=$$(echo "$$DOMAINS" | cut -d, -f1)
      if [ -d "/etc/letsencrypt/live/$$first_domain" ]; then
        echo "[certbot_init] Certificado ya existe para $$first_domain. Usa renew o --force-renewal si necesitas regenerar."
        exit 0
      fi
      for d in $$(echo "$$DOMAINS" | tr , " "); do
        domain_args="$$domain_args -d $$d"
      done
      echo "Emitiendo para: $$DOMAINS"
      certbot certonly --webroot -w /var/www/certbot --agree-tos --no-eff-email --email "$$EMAIL" $$domain_args
      '
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_etc:/etc/letsencrypt
    networks:
      - orbit-network
    restart: "no"

networks:
  orbit-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  odoo_data:
    driver: local
  certbot_www:
    driver: local
  certbot_etc:
    driver: local
